{"version":3,"sources":["components/Data.jsx","components/TableBody.jsx","components/TableHeader.jsx","App.js","reportWebVitals.js","index.js"],"names":["Data","data","Delete","update","className","disabled","readOnly","value","firstName","secondName","type","onClick","_id","TableBody","map","dt","TableHeader","inputData","handleChange","currentOperation","handleDataAdd","setUpdatedData","dataRenderer","name","onChange","firstInput","placeholder","secondInput","operation","icon","faPlus","faPencilAlt","App","useState","setData","useEffect","a","fetch","allData","json","d","console","log","message","fetchData","store","addNotification","title","insert","container","animationIn","animationOut","dismiss","duration","onScreen","setInputData","setCurrentOperation","staticData","sendData","method","headers","body","JSON","stringify","newUsers","item","__v","event","preventDefault","newUser","handleDelete","id","newData","splice","filter","newArray","handleUpdate","oldData","input1","input2","newDt","newD","index","findIndex","el","renderData","useMemo","target","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.997e13db.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Data = ({ data, Delete, update }) => {\n  return (\n    <tr className=\"table-margin\">\n      <td>\n        <input\n          className=\"input-data\"\n          disabled\n          readOnly={true}\n          value={data.firstName}\n        />\n      </td>\n      <td>\n        <input\n          className=\"input-data\"\n          disabled\n          readOnly={true}\n          value={data.secondName}\n        />\n      </td>\n      <td>\n        <button\n          className=\"btn-succes\"\n          type=\"button\"\n          onClick={() => update(data._id)}\n        >\n          Edit\n        </button>\n      </td>\n      <td>\n        <button\n          className=\"btn-danger\"\n          onClick={() => Delete(data._id)}\n          type=\"button\"\n        >\n          Delete\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nexport default Data;\n","import React from \"react\";\nimport Data from \"./Data\";\n\nconst TableBody = ({ data, Delete, update }) => {\n  return (\n    <tbody>\n      {data.map((dt) => {\n        return <Data key={dt._id} data={dt} Delete={Delete} update={update} />;\n      })}\n    </tbody>\n  );\n};\n\nexport default TableBody;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\nconst TableHeader = ({\n  inputData,\n  handleChange,\n  currentOperation,\n  handleDataAdd,\n  setUpdatedData,\n  dataRenderer\n}) => {\n  return (\n    <thead> \n      \n      <tr>\n        <td>\n          <input\n            className=\"input-data-add \"\n            name=\"firstInput\"\n            onChange={handleChange}\n            value={inputData.firstInput}\n            placeholder=\"First Name\"\n          />\n        </td>\n        <td>\n          <input\n            className=\"input-data-add \"\n            name=\"secondInput\"\n            onChange={handleChange}\n            value={inputData.secondInput}\n            placeholder=\"Second Name\"\n          />\n        </td>\n        <td >\n          {/* According to currentoperation state render add/update button */}\n          {currentOperation.operation === \"add\" && (\n            <button className=\"btn-add\" type=\"button\" onClick={handleDataAdd}>\n              <FontAwesomeIcon icon={faPlus} /> Add\n            </button>\n          )}\n          {currentOperation.operation === \"update\" && (\n            <button\n              className=\"btn-update\"\n              type=\"button\"\n              onClick={setUpdatedData}\n            >\n              <FontAwesomeIcon icon={faPencilAlt} />\n              Update\n            </button>\n          )}\n        </td>\n        <td>\n          <button className=\"btn-add\" type=\"button\" onClick={dataRenderer}>Render Data</button>\n        </td>\n      </tr>\n    </thead>\n  );\n};\n\nexport default TableHeader;\n","import { useEffect, useMemo, useState } from \"react\";\nimport \"./styles.scss\";\nimport TableBody from \"./components/TableBody\";\nimport TableHeader from \"./components/TableHeader\";\nimport ReactNotification from 'react-notifications-component'\nimport 'react-notifications-component/dist/theme.css'\nimport { store } from 'react-notifications-component';\n\n\n\nfunction App() {\n  //State for main Data\n  const [data, setData] = useState([]);\n  useEffect(()=>{\n    const fetchData = async () => {\n      try {\n        const allData = await fetch(\"http://localhost:3000/allUsers\")\n        const d = await allData.json();\n        setData(d.data)\n      } catch (err) {\n        console.log(err.message);\n      }\n    }\n    fetchData();\n    store.addNotification({\n      title: \"Wonderful!\",\n      message: \"teodosii@react-notifications-component\",\n      type: \"success\",\n      insert: \"top\",\n      container: \"top-right\",\n      animationIn: [\"animate__animated\", \"animate__fadeIn\"],\n      animationOut: [\"animate__animated\", \"animate__fadeOut\"],\n      dismiss: {\n        duration: 5000,\n        onScreen: true\n      }\n    });\n  },[])\n  //State for Inputs\n  const [inputData, setInputData] = useState({\n    firstInput: \"\",\n    secondInput: \"\",\n  });\n  //State for update/add button\n  const [currentOperation, setCurrentOperation] = useState({\n    operation: \"add\",\n  });\n\n  const dataRenderer = async () => {\n    const staticData = [{\n      \"firstName\": \"Kishan\",\n      \"secondName\": \"Sheth\",\n    },\n    {\n      \"firstName\": \"Romit\",\n      \"secondName\": \"Gandhi\",\n    },\n    {\n      \"firstName\": \"Yash\",\n      \"secondName\": \"Mehta\",\n    },\n    {\n      \"firstName\": \"Herin\",\n      \"secondName\": \"Zaveri\",\n    },\n    {\n      \"firstName\": \"Chaitanya\",\n      \"secondName\": \"Rana\",\n    },\n    {\n      \"firstName\": \"Savan\",\n      \"secondName\": \"Aghera\",\n    },\n    {\n      \"firstName\": \"Smit\",\n      \"secondName\": \"Hapani\",\n    },\n    {\n      \"firstName\": \"Smit\",\n      \"secondName\": \"Panchal\",\n    },\n    {\n      \"firstName\": \"Rupesh\",\n      \"secondName\": \"Suryavanshi\",\n    },\n    {\n      \"firstName\": \"Ravindra\",\n      \"secondName\": \"Singh\",\n    },\n  ];\n  //call the API and send the data\n  try {\n    const sendData = {\n      method:'POST',\n      headers: {'Content-Type': 'application/json' },\n      body: JSON.stringify(staticData)\n    }\n    const newUsers = await fetch('http://localhost:3000/createMultipleUsers',sendData);\n    let {data:dt} = await newUsers.json();\n     dt = dt.map(function(item) {\n      delete item.__v;\n      return item;\n    })\n    setData([...data,...dt])\n  }\n  catch(err) {\n    console.log(err);\n  }\n  //add the data recieved from the api to the current state. Add data not overwrite it\n  }\n\n  //Input onChange method\n  const handleChange = (event) => {\n    setInputData({ ...inputData, [event.target.name]: event.target.value });\n  };\n\n  //Method for adding data\n  const handleDataAdd = async (event) => {\n    event.preventDefault();\n    const firstName = inputData.firstInput;\n    const secondName = inputData.secondInput;\n    try {\n      //Add data only if both inputs have values\n      if (firstName && secondName) {\n        const sendData = {\n          method:'POST',\n          headers: {'Content-Type': 'application/json' },\n          body: JSON.stringify({firstName,secondName})\n        }\n        const newUser = await fetch('http://localhost:3000/createUser',sendData);\n        const {data:dt} = await newUser.json();\n        console.log(dt);\n        setData([...data, { _id:dt._id, firstName:dt.firstName, secondName:dt.secondName }]);\n        setInputData({ firstInput: \"\", secondInput: \"\" });\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  //Method for deleteing data\n  const handleDelete =async (id) => {\n    //if the data which is to be delete is in update mode then clear the data update inputs and then delete data\n    if (id === currentOperation.id) {\n      setCurrentOperation({ operation: \"add\" });\n      setInputData({ firstInput: \"\", secondInput: \"\" });\n    }\n    const sendData = {\n      method:'DELETE',\n      headers: {'Content-Type': 'application/json' },\n    }\n    try {\n      const result = await fetch(`http://localhost:3000/deleteUser/${id}`,sendData)\n      const newData= data.splice(0).filter((dt) => dt._id !== id);\n      const newArray = [...newData];\n      setData([...newArray]);\n      } catch (err) {\n        console.log(err);\n      }\n  };\n\n  //Method for changing into update mode\n  const handleUpdate = (id) => {\n    const oldData = data.filter((dt) => dt._id === id);\n    setInputData({\n      firstInput: oldData[0].firstName,\n      secondInput: oldData[0].secondName,\n    });\n    setCurrentOperation({ _id:id, operation: \"update\" });\n  };\n\n  //Method for updating the data\n  const setUpdatedData = async () => {\n    const input1 = inputData.firstInput;\n    const input2 = inputData.secondInput;\n    //Only update if the input have values\n    const sendData = {\n      method:'PATCH',\n      headers: {'Content-Type': 'application/json' },\n    }\n    if (input1 && input2) {\n      const newDt = await fetch(`http://localhost:3000/updateuser/${currentOperation._id}?firstName=${input1}&secondName=${input2}`,sendData);\n      const newD = await newDt.json();\n      const index = data.findIndex((el) => el._id === currentOperation._id);\n      let newData = [...data];\n      newData[index].firstName = newD.data.firstName;\n      newData[index].secondName = newD.data.secondName;\n      setData([...newData]);\n      setCurrentOperation({ operation: \"add\" });\n      setInputData({ firstInput: \"\", secondInput: \"\" });\n    }\n  };\n\n\n  const renderData = useMemo(()=> {\n    return <TableBody data={data} Delete={handleDelete} update={handleUpdate} />\n  },[data,handleDelete,handleUpdate])\n\n  return (\n    <div className=\"app\">\n            <ReactNotification />\n\n      <form>\n        <table>\n          <TableHeader\n            inputData={inputData}\n            handleChange={handleChange}\n            currentOperation={currentOperation}\n            handleDataAdd={handleDataAdd}\n            setUpdatedData={setUpdatedData}\n            dataRenderer={dataRenderer}\n          />\n          {/*TableBody has a Data component for all the data rows*/}\n          {data.length>0 && renderData}\n        </table>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}